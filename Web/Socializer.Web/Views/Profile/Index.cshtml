@using Socializer.Common
@model ProfileViewModel
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@{
    this.ViewData["Title"] = Model.UserName;
    var friendStatus = this.UserService.CheckFriendStatus(this.UserManager.GetUserId(this.User), Model.Id);
    var requestStatus = this.UserService.CheckRequestStatus(this.UserManager.GetUserId(this.User), Model.Id);

    var profileUrl = !string.IsNullOrEmpty(Model.ProfileImage?.Url) ? Model.ProfileImage.Url : "https://picsum.photos/200/300";
}

<div class="container">
    <div class="row">
        <div class="text-center col-2 mx-2 border-left border-right">
            <div class="row">
                <img class="rounded-circle img-thumbnail mx-auto p-1 w-75 profileImage" src="@profileUrl" alt="profile-image" />
            </div>
            <div class="row my-2">
                <h3>@Model.FirstName @Model.LastName</h3>
            </div>
            
            <div class="row-cols-auto my-2">
                @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.AdministratorRoleName))
                {
                    <span class="badge badge-danger" alt="Administrator"><i class="fas fa-user-shield"></i> Administrator</span>
                }
                @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.VerifiedRoleName))
                {
                    <span class="badge badge-info" alt="Verified"><i class="fas fa-check"></i> Verified</span>
                }
                @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.DeveloperRoleName))
                {
                    <span class="badge badge-dark" alt="Developer"><i class="fab fa-dev"></i> Developer</span>
                }
            </div>

            @if (this.UserManager.GetUserId(this.User) != Model.Id)
            {
                <div class="row">
                    <div class="col">
                        @if (friendStatus)
                        {
                            <a class="btn btn-outline-warning my-2">Message</a>
                        }
                        else
                        {
                            if (!requestStatus)
                            {
                                <a class="btn btn-outline-info my-2" asp-controller="Profile" asp-action="AddFriend" asp-route-userId="@Model.Id" asp-route-returnUrl="@this.Context.Request.Path.Value">Add Friend</a>
                            }
                            else
                            {
                                <a class="btn btn-outline-light text-black-50 my-2 disabled">Request Pending</a>
                            }
                        }
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p>@Model.Description</p>
            }
            <div class="row">
                <p><i class="fas fa-genderless"></i> @Model.Gender.ToString()</p>
                <p><i class="far fa-clock"></i> Joined in @Model.CreatedOn.ToString("M")</p>
                <p><i class="fas fa-birthday-cake"></i> Born on @Model.Birthdate.ToShortDateString()</p>
            </div>
        </div>
        <div class="col-8 mx-auto">
            @foreach (var post in Model.Posts.OrderByDescending(x => x.CreatedOn))
            {
                <partial name="_PostPartial" model="post" />
            }
        </div>
    </div>
</div>