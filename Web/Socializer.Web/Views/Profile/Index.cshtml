@model ProfileIndexModel
@inject IFriendService friendService
@inject UserManager<ApplicationUser> UserManager
@{
    this.ViewData["Title"] = Model.ViewModel.UserName;
    var friendStatus = await this.friendService.CheckFriendStatus(this.UserManager.GetUserId(this.User), Model.ViewModel.Id);
    var requestStatus = await this.friendService.CheckRequestStatus(this.UserManager.GetUserId(this.User), Model.ViewModel.Id);
}

<div class="container">
    <div class="row">
        <img width="75" height="75" class="rounded-circle img-thumbnail p-1 profileImage" src="@Model.ViewModel.ProfileImageUrl" alt="profile-images"/>
        <img class="cover-image" src="@Model.ViewModel.CoverImageUrl" alt="cover-images" />
    </div>
    <div class="row text-center mt-2">
        <p class="h2">@Model.ViewModel.FirstName @Model.ViewModel.LastName</p>
        <p class="h6">@Model.ViewModel.Description</p>

        <hr />
    </div>
    <div class="row">
        <div class="col">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home"
                       aria-selected="true">Posts</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile"
                       aria-selected="false">Friends <i class="text-secondary my-auto">@Model.FriendsCount</i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact"
                       aria-selected="false">Photos <i class="text-secondary my-auto">@Model.ImagesCount</i></a>
                </li>
            </ul>
        </div>
        @if (this.UserManager.GetUserId(this.User) != Model.ViewModel.Id)
        {
            <div class="col text-right">
                @if (friendStatus)
                {
                    <a class="btn btn-outline-warning my-2">Message</a>
                }
                else
                {
                    if (!requestStatus)
                    {
                        <a class="btn btn-outline-info my-2" asp-controller="Profile" asp-action="AddFriend" asp-route-userId="@Model.ViewModel.Id" asp-route-returnUrl="@this.Context.Request.Path.Value">Add Friend</a>
                    }
                    else
                    {
                        <a class="btn btn-outline-light text-black-50 my-2 disabled">Request Pending</a>
                    }
                }
            </div>
        }
    </div>
    <div class="row">
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                <div class="row">
                    <div class="col-md-4">
                        <div class="p-3 bg-light shodow-lg rounded m-2">
                            <div class="row text-left">
                                <p class="h3 bold">Intro</p>
                            </div>
                            <div class="row">
                                <p><i class="fas fa-genderless"></i> @Model.ViewModel.Gender.ToString()</p>
                            </div>
                            <div class="row">
                                <p><i class="far fa-clock"></i> Joined in @Model.ViewModel.CreatedOn.ToString("M")</p>
                            </div>
                            <div class="row">
                                <p><i class="fas fa-birthday-cake"></i> Born on @Model.ViewModel.Birthdate.ToShortDateString()</p>
                            </div>
                            @if (this.UserManager.GetRolesAsync(await this.UserManager.GetUserAsync(this.User)).GetAwaiter().GetResult().Any())
                            {
                                <div class="row-cols-auto my-2">
                                    <p class="text-left bold h4">Roles:</p>
                                    @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.ViewModel.Id), GlobalConstants.AdministratorRoleName))
                                    {
                                        <span class="badge badge-danger" alt="Administrator"><i class="fas fa-user-shield"></i> Administrator</span>
                                    }
                                    @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.ViewModel.Id), GlobalConstants.VerifiedRoleName))
                                    {
                                        <span class="badge badge-info" alt="Verified"><i class="fas fa-check"></i> Verified</span>
                                    }
                                    @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.ViewModel.Id), GlobalConstants.DeveloperRoleName))
                                    {
                                        <span class="badge badge-dark" alt="Developer"><i class="fab fa-dev"></i> Developer</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="mx-2">
                            @foreach (var post in Model.ViewModel.Posts.OrderByDescending(x => x.CreatedOn))
                            {
                                <partial name="_PostPartial" model="post" />
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                <div class="row-cols-auto">
                    @foreach (var friend in Model.Friends)
                    {
                        <div class="col-4 p-4 my-2 bg-dark rounded">
                            <div class="row">
                                <div class="col-3">
                                    <img class="align-self-start mr-3 img-thumbnail friend-thumbnail-img" src="@friend.ProfileImageUrl" alt="Generic placeholder image">
                                </div>
                                <div class="col text-left">
                                    <h5 class="my-0 text-white">
                                        <a class="text-white" asp-controller="Profile" asp-action="Index" asp-route-username="@friend.UserName">@friend.FirstName @friend.LastName</a>
                                    </h5>
                                    <sub class="text-white">@@@friend.UserName</sub>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
                <div class="row-cols-auto">
                    @foreach (var image in Model.Images.OrderByDescending(x => x.CreatedOn))
                    {
                        <img src="@image.Url" alt="@image.Name" class="profile-imgs-index m-2 rounded-2"/>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@*<div class="text-center col-2 mx-2 border-left border-right">
        <div class="row">
            <img width="75" height="75" class="rounded-circle img-thumbnail mx-auto p-1" src="@Model.ProfileImageUrl" alt="profile-images"/>
        </div>
        <div class="row my-2">
            <h3>@Model.FirstName @Model.LastName</h3>
        </div>
    </div>*@

@*<div class="row-cols-auto my-2">
        @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.AdministratorRoleName))
        {
            <span class="badge badge-danger" alt="Administrator"><i class="fas fa-user-shield"></i> Administrator</span>
        }
        @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.VerifiedRoleName))
        {
            <span class="badge badge-info" alt="Verified"><i class="fas fa-check"></i> Verified</span>
        }
        @if (await this.UserManager.IsInRoleAsync(await this.UserManager.FindByIdAsync(Model.Id), GlobalConstants.DeveloperRoleName))
        {
            <span class="badge badge-dark" alt="Developer"><i class="fab fa-dev"></i> Developer</span>
        }
    </div>

    @if (this.UserManager.GetUserId(this.User) != Model.Id)
    {
        <div class="row">
            <div class="col">
                @if (friendStatus)
                {
                    <a class="btn btn-outline-warning my-2">Message</a>
                }
                else
                {
                    if (!requestStatus)
                    {
                        <a class="btn btn-outline-info my-2" asp-controller="Profile" asp-action="AddFriend" asp-route-userId="@Model.Id" asp-route-returnUrl="@this.Context.Request.Path.Value">Add Friend</a>
                    }
                    else
                    {
                        <a class="btn btn-outline-light text-black-50 my-2 disabled">Request Pending</a>
                    }
                }
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <p>@Model.Description</p>
    }
    <div class="row">
        <p><i class="fas fa-genderless"></i> @Model.Gender.ToString()</p>
        <p><i class="far fa-clock"></i> Joined in @Model.CreatedOn.ToString("M")</p>
        <p><i class="fas fa-birthday-cake"></i> Born on @Model.Birthdate.ToShortDateString()</p>
    </div>*@